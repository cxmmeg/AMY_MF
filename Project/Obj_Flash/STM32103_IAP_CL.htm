<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj_Flash\STM32103_IAP_CL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj_Flash\STM32103_IAP_CL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sat Aug 20 14:51:15 2016
<BR><P>
<H3>Maximum Stack Usage =       2720 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; API_NetDeal &rArr; NetDeal &rArr; API_read_eth_net &rArr; read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[55]">API_Reset</a> from api.o(i.API_Reset) referenced from main.o(i.InitSoftSystem)
 <LI><a href="#[55]">API_Reset</a> from api.o(i.API_Reset) referenced from protocol.o(i.NetDeal)
 <LI><a href="#[56]">API_Select_Program_run</a> from api.o(i.API_Select_Program_run) referenced from main.o(i.InitSoftSystem)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[48]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[49]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[4a]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[47]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from usart.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from usart.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from usart.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[41]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[42]">DMA2_Channel3_IRQHandler</a> from usart.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[43]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[44]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[5f]">DMA_UART_Receive_Process</a> from usart.o(i.DMA_UART_Receive_Process) referenced from usart.o(i.Uart_Init)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[45]">ETH_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[46]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[54]">IAP_ReStart</a> from iap_updata.o(i.IAP_ReStart) referenced from iap_updata.o(i.IAP_Update_End)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[4b]">OTG_FS_IRQHandler</a> from stm32f10x_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[5a]">Program_Updata_timeout</a> from download_pro.o(i.Program_Updata_timeout) referenced from download_pro.o(i.Program_Updata)
 <LI><a href="#[57]">Protocol_DoProtocol</a> from protocol_debug.o(i.Protocol_DoProtocol) referenced from protocol_debug.o(i.Init_Protocol_Debug)
 <LI><a href="#[58]">Protocol_Receive</a> from protocol_debug.o(i.Protocol_Receive) referenced from protocol_debug.o(i.Init_Protocol_Debug)
 <LI><a href="#[59]">Protocol_Send</a> from protocol_debug.o(i.Protocol_Send) referenced from protocol_debug.o(i.Init_Protocol_Debug)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3a]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[5c]">ReceivePro_Debug_Dispose</a> from protocolreccallback.o(i.ReceivePro_Debug_Dispose) referenced from protocol.o(i.Protocols_Init)
 <LI><a href="#[5b]">ReceiveTimerOut</a> from protocol_debug.o(i.ReceiveTimerOut) referenced from protocol_debug.o(i.Protocol_Receive)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[5e]">Send_Net_Data</a> from protocol.o(i.Send_Net_Data) referenced 2 times from protocol.o(i.Send_Net_Data)
 <LI><a href="#[5e]">Send_Net_Data</a> from protocol.o(i.Send_Net_Data) referenced from protocol.o(i.StartSendBuffer)
 <LI><a href="#[5d]">SettingCommBps</a> from protocol.o(i.SettingCommBps) referenced from protocol.o(i.SetUartParameter)
 <LI><a href="#[13]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_power_cl.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from lowprcisiontime.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3e]">TIM6_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[7]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced 2 times from usart.o(.data)
 <LI><a href="#[7]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[9]">UART5_IRQHandler</a> from usart.o(i.UART5_IRQHandler) referenced 2 times from usart.o(.data)
 <LI><a href="#[9]">UART5_IRQHandler</a> from usart.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[1]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced 2 times from usart.o(.data)
 <LI><a href="#[1]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[0]">USART1_Init</a> from usart.o(i.USART1_Init) referenced 2 times from usart.o(.data)
 <LI><a href="#[4f]">USART1_Timeout</a> from usart.o(i.USART1_Timeout) referenced from usart.o(i.DMA_USART_Timeout)
 <LI><a href="#[3]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced 2 times from usart.o(.data)
 <LI><a href="#[3]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[2]">USART2_Init</a> from usart.o(i.USART2_Init) referenced 2 times from usart.o(.data)
 <LI><a href="#[50]">USART2_Timeout</a> from usart.o(i.USART2_Timeout) referenced from usart.o(i.DMA_USART_Timeout)
 <LI><a href="#[5]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced 2 times from usart.o(.data)
 <LI><a href="#[5]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[4]">USART3_Init</a> from usart.o(i.USART3_Init) referenced 2 times from usart.o(.data)
 <LI><a href="#[51]">USART3_Timeout</a> from usart.o(i.USART3_Timeout) referenced from usart.o(i.DMA_USART_Timeout)
 <LI><a href="#[6]">USART4_Init</a> from usart.o(i.USART4_Init) referenced 2 times from usart.o(.data)
 <LI><a href="#[52]">USART4_Timeout</a> from usart.o(i.USART4_Timeout) referenced from usart.o(i.DMA_USART_Timeout)
 <LI><a href="#[8]">USART5_Init</a> from usart.o(i.USART5_Init) referenced 2 times from usart.o(.data)
 <LI><a href="#[53]">USART5_Timeout</a> from usart.o(i.USART5_Timeout) referenced from usart.o(i.DMA_USART_Timeout)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f10x_power_cl.o(.text) referenced from startup_stm32f10x_power_cl.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_power_cl.o(.text)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[194]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[195]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[196]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[197]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[198]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[199]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[19a]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[19b]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[168]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_To_UserProgram
</UL>

<P><STRONG><a name="[19c]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[19d]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_power_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChip
</UL>

<P><STRONG><a name="[140]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
</UL>

<P><STRONG><a name="[162]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_iap
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChip
</UL>

<P><STRONG><a name="[19f]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>DMA_DeInit</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
</UL>

<P><STRONG><a name="[133]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>

<P><STRONG><a name="[1a1]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
</UL>

<P><STRONG><a name="[13c]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
</UL>

<P><STRONG><a name="[134]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
</UL>

<P><STRONG><a name="[1a2]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>

<P><STRONG><a name="[132]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>

<P><STRONG><a name="[1a4]"></a>FLASH_SetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pra
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>

<P><STRONG><a name="[1a7]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pra
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>

<P><STRONG><a name="[1a8]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[64]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[66]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pra
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>

<P><STRONG><a name="[67]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[68]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[69]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[6b]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[6a]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[6c]"></a>FLASH_ProgramWord</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_End
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>

<P><STRONG><a name="[6e]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 216 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[70]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[71]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1a9]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>FLASH_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[74]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[1b0]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupComDir
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5200
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupComDir
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5200
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>

<P><STRONG><a name="[1b5]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
</UL>

<P><STRONG><a name="[190]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
</UL>

<P><STRONG><a name="[191]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
</UL>

<P><STRONG><a name="[15b]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchDog
</UL>

<P><STRONG><a name="[192]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
</UL>

<P><STRONG><a name="[1bd]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[75]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1c0]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>RCC_PREDIV1Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>RCC_PREDIV2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>RCC_PLL2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>RCC_PLL2Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>RCC_PLL3Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>RCC_PLL3Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>RCC_OTGFSCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>RCC_I2S2CLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>RCC_I2S3CLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 374 bytes, Stack size 20 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[13f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
</UL>

<P><STRONG><a name="[c1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[c2]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[1d8]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[78]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1d9]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>

<P><STRONG><a name="[169]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>

<P><STRONG><a name="[1df]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>TIM_OC2Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>TIM_OC3Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>TIM_OC4Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7f]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7d]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7b]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[79]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[82]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1e3]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>

<P><STRONG><a name="[1e8]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>

<P><STRONG><a name="[1e9]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[83]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[85]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[87]"></a>TIM_ETRConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[86]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[88]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1ed]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>

<P><STRONG><a name="[1f4]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>TIM_CCxCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>TIM_CCxNCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8a]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>

<P><STRONG><a name="[223]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>

<P><STRONG><a name="[224]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>

<P><STRONG><a name="[15a]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableCom
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>

<P><STRONG><a name="[13b]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
</UL>

<P><STRONG><a name="[225]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataFromUartStruct
</UL>

<P><STRONG><a name="[17e]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataFromUartStruct
</UL>

<P><STRONG><a name="[22a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>

<P><STRONG><a name="[97]"></a>Delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_net
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
</UL>

<P><STRONG><a name="[8c]"></a>get_net_config</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_net_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Initialization
</UL>

<P><STRONG><a name="[8e]"></a>Set_network_bak</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSUBR
</UL>

<P><STRONG><a name="[96]"></a>W5100_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[99]"></a>Set_network</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSUBR
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Initialization
</UL>

<P><STRONG><a name="[9b]"></a>W5100_Initialization</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[9d]"></a>write_info_data_to_flash</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = write_info_data_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickDog
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_Data_init
</UL>

<P><STRONG><a name="[a1]"></a>read_info_data_from_flash</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_info_data_from_flash &rArr; swap_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_Data_init
</UL>

<P><STRONG><a name="[a3]"></a>write_mac_data_from_flash</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = write_mac_data_from_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickDog
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_init
</UL>

<P><STRONG><a name="[a4]"></a>mac_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mac_init &rArr; write_mac_data_from_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_Data_init
</UL>

<P><STRONG><a name="[a5]"></a>info_Data_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = info_Data_init &rArr; mac_init &rArr; write_mac_data_from_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_ip
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_info_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[a6]"></a>eth_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_Data_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Initialization
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_eth_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>

<P><STRONG><a name="[ab]"></a>Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Reset &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Reset
</UL>

<P><STRONG><a name="[ac]"></a>ip_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ip_init &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_tcp
</UL>

<P><STRONG><a name="[ad]"></a>W5100_pro</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W5100_pro &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_1ms_pro
</UL>

<P><STRONG><a name="[b4]"></a>tcp_1ms_pro</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_1ms_pro &rArr; W5100_pro &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_tcp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_tcp_1ms_pro
</UL>

<P><STRONG><a name="[b6]"></a>read_eth_net</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_count
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_read_eth_net
</UL>

<P><STRONG><a name="[123]"></a>check_sendable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_check_sendable
</UL>

<P><STRONG><a name="[b8]"></a>write_eth_net</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = write_eth_net &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickDog
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_write_eth_net
</UL>

<P><STRONG><a name="[234]"></a>con_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, httpd.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>act_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, httpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_tcp
</UL>

<P><STRONG><a name="[b7]"></a>set_act_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eth_net
</UL>

<P><STRONG><a name="[235]"></a>httpd_appcall</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, httpd.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>swap_ip</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_Data_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_info_data_from_flash
</UL>

<P><STRONG><a name="[b1]"></a>udp_appcall</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = udp_appcall &rArr; goto_iap &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_iap
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ComConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_ip
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[b5]"></a>main_tcp</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main_tcp &rArr; ip_init &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_time
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_1ms_pro
</UL>

<P><STRONG><a name="[bf]"></a>reset_pra</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickDog
</UL>

<P><STRONG><a name="[c0]"></a>WIZ_CS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>

<P><STRONG><a name="[a7]"></a>WIZ_SPI_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WIZ_SPI_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[c5]"></a>SPI1_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>

<P><STRONG><a name="[236]"></a>incr_windowfull_retry_cnt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w5200.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>init_windowfull_retry_cnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w5200.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>getISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w5200.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>putISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w5200.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>getIINCHIP_RxMAX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[e0]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[e3]"></a>getIINCHIP_RxMASK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[de]"></a>getIINCHIP_TxMASK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[e4]"></a>getIINCHIP_RxBASE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[df]"></a>getIINCHIP_TxBASE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[c9]"></a>IINCHIP_CSoff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_CSoff &rArr; WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[ca]"></a>IINCHIP_CSon</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_CSon &rArr; WIZ_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[cb]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[98]"></a>IINCHIP_WRITE</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_PROTO
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_TTL
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_MSS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIMR
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSUBR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRTR
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRCR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Init
</UL>

<P><STRONG><a name="[9c]"></a>IINCHIP_READ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIR
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSHAR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_Initialization
</UL>

<P><STRONG><a name="[cc]"></a>wiz_write_buf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[cd]"></a>wiz_read_buf</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSon
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_CSoff
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[ce]"></a>setMR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iinchip_init
</UL>

<P><STRONG><a name="[cf]"></a>iinchip_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMR
</UL>

<P><STRONG><a name="[95]"></a>sysinit</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[91]"></a>setGAR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setGAR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[90]"></a>saveSUBR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, w5200.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[9a]"></a>setSUBR</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setSUBR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
</UL>

<P><STRONG><a name="[d0]"></a>clearSUBR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>

<P><STRONG><a name="[8f]"></a>setSHAR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setSHAR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[92]"></a>setSIPR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setSIPR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[d1]"></a>getGAR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[23a]"></a>getSUBR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w5200.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>getSHAR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[d3]"></a>getSIPR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[d4]"></a>getIR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[93]"></a>setRTR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setRTR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[94]"></a>setRCR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setRCR &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_network_bak
</UL>

<P><STRONG><a name="[d5]"></a>setIMR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>

<P><STRONG><a name="[d6]"></a>setSn_MSS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>

<P><STRONG><a name="[d7]"></a>setSn_TTL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>

<P><STRONG><a name="[d8]"></a>setSn_PROTO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, w5200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>

<P><STRONG><a name="[d9]"></a>getSn_IR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getSn_IR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[da]"></a>getSn_SR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getSn_SR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[db]"></a>getSn_TX_FSR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_TX_FSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[dc]"></a>getSn_RX_RSR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_RX_RSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[dd]"></a>write_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxBASE
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMASK
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
</UL>

<P><STRONG><a name="[e1]"></a>send_data_processing</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[e2]"></a>read_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxBASE
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxMASK
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_RxMAX
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
</UL>

<P><STRONG><a name="[e6]"></a>recv_data_processing</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[b3]"></a>close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[e7]"></a>socket</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[e8]"></a>listen</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = listen &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[e9]"></a>connect</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = connect &rArr; getSn_IR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[ea]"></a>disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disconnect &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[b9]"></a>send</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_net
</UL>

<P><STRONG><a name="[eb]"></a>recv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[b2]"></a>sendto</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sendto &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[ec]"></a>recvfrom</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = recvfrom &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udp
</UL>

<P><STRONG><a name="[ae]"></a>loopback_tcps</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eth_net
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[af]"></a>loopback_tcpc</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = loopback_tcpc &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_return
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eth_net
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[b0]"></a>loopback_udp</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = loopback_udp &rArr; recvfrom &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
</UL>

<P><STRONG><a name="[ee]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c3]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[ef]"></a>I2S_Init</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[23b]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZ_SPI_Init
</UL>

<P><STRONG><a name="[23d]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SendByte
</UL>

<P><STRONG><a name="[c8]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SendByte
</UL>

<P><STRONG><a name="[240]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SendByte
</UL>

<P><STRONG><a name="[248]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>Delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[f0]"></a>Delay_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_W5200
</UL>

<P><STRONG><a name="[f2]"></a>Reset_W5200</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[ed]"></a>time_return</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_net
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eth_net
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Iap_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProtocolBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_ip
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100_pro
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_info_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_config
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_End
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[ba]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[250]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>API_AddProtocolBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_AddProtocolBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddProtocolBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByte
</UL>

<P><STRONG><a name="[f9]"></a>API_Check_Run_User_Program_Falg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_Check_Run_User_Program_Falg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_Check_Run_User_Program_Falg &rArr; Check_Run_User_Program_Falg &rArr; API_KillTimer &rArr; DelTimer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Run_User_Program_Falg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>API_DoProtocols</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_DoProtocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_DoProtocols &rArr; DoProtocols
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocols
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>API_GetProtocolBufferOrLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_GetProtocolBufferOrLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_GetProtocolBufferOrLen &rArr; GetProtocolBufferOrLen
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolBufferOrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendChksum
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendPostChksum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDataLen
</UL>

<P><STRONG><a name="[ff]"></a>API_Get_Iap_Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_Get_Iap_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_Get_Iap_Config &rArr; Get_Iap_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Iap_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
</UL>

<P><STRONG><a name="[101]"></a>API_IAP_Update_End</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_IAP_Update_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = API_IAP_Update_End &rArr; IAP_Update_End &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_End
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
</UL>

<P><STRONG><a name="[103]"></a>API_IAP_Update_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_IAP_Update_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = API_IAP_Update_Start &rArr; IAP_Update_Start &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
</UL>

<P><STRONG><a name="[105]"></a>API_IAP_Update_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_IAP_Update_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = API_IAP_Update_Write &rArr; IAP_Update_Write &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
</UL>

<P><STRONG><a name="[107]"></a>API_IAP_copyflash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_IAP_copyflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = API_IAP_copyflash &rArr; IAP_copyflash &rArr; IAP_ReStart &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
</UL>

<P><STRONG><a name="[109]"></a>API_Jump_To_UserProgram</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_Jump_To_UserProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_Jump_To_UserProgram &rArr; Jump_To_UserProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_To_UserProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
</UL>

<P><STRONG><a name="[10b]"></a>API_KillTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_KillTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_KillTimer &rArr; DelTimer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Run_User_Program_Falg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_DoProtocol
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Net_Data
</UL>

<P><STRONG><a name="[10d]"></a>API_NetDeal</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_NetDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720<LI>Call Chain = API_NetDeal &rArr; NetDeal &rArr; API_read_eth_net &rArr; read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>API_Protocols_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_Protocols_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = API_Protocols_Init &rArr; Protocols_Init &rArr; Uart_Init &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocols_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardWare
</UL>

<P><STRONG><a name="[55]"></a>API_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = API_Reset &rArr; Reset &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.InitSoftSystem)
<LI> protocol.o(i.NetDeal)
</UL>
<P><STRONG><a name="[111]"></a>API_ResetProtocolBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_ResetProtocolBuffer))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetProtocolBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendHead
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendHead
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealProtocol
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePro_Debug_Dispose
</UL>

<P><STRONG><a name="[56]"></a>API_Select_Program_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_Select_Program_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = API_Select_Program_run &rArr; Select_Program_run &rArr; API_IAP_copyflash &rArr; IAP_copyflash &rArr; IAP_ReStart &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitSoftSystem)
</UL>
<P><STRONG><a name="[114]"></a>API_SetComParameter</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, api.o(i.API_SetComParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
</UL>

<P><STRONG><a name="[116]"></a>API_SetTimer</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, api.o(i.API_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartParameter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetDeal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_End
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftSystem
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Receive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Net_Data
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Timeout
</UL>

<P><STRONG><a name="[118]"></a>API_StartRunTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_StartRunTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_StartRunTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftSystem
</UL>

<P><STRONG><a name="[11a]"></a>API_StartSendBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_StartSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendTail
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendTail
</UL>

<P><STRONG><a name="[11c]"></a>API_Timers_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_Timers_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_Timers_Init &rArr; LowPrcisionTime_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPrcisionTime_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardWare
</UL>

<P><STRONG><a name="[11e]"></a>API_WatchDog_Feed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_WatchDog_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_WatchDog_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KickDog
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
</UL>

<P><STRONG><a name="[120]"></a>API_WatchDog_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_WatchDog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_WatchDog_Init &rArr; WD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Program_run
</UL>

<P><STRONG><a name="[122]"></a>API_check_sendable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_check_sendable))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sendable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Net_Data
</UL>

<P><STRONG><a name="[124]"></a>API_eth_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = API_eth_init &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardWare
</UL>

<P><STRONG><a name="[125]"></a>API_read_eth_net</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_read_eth_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = API_read_eth_net &rArr; read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eth_net
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetDeal
</UL>

<P><STRONG><a name="[126]"></a>API_tcp_1ms_pro</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, api.o(i.API_tcp_1ms_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = API_tcp_1ms_pro &rArr; tcp_1ms_pro &rArr; W5100_pro &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_1ms_pro
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimer
</UL>

<P><STRONG><a name="[127]"></a>API_write_eth_net</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(i.API_write_eth_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = API_write_eth_net &rArr; write_eth_net &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_net
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Net_Data
</UL>

<P><STRONG><a name="[f8]"></a>AddProtocolBuffer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, protocol.o(i.AddProtocolBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddProtocolBuffer
</UL>

<P><STRONG><a name="[128]"></a>AscTOHex</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, basicfunc.o(i.AscTOHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AscTOHex
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_chksum
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHexFun
</UL>

<P><STRONG><a name="[12a]"></a>AscToHexFun</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, basicfunc.o(i.AscToHexFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AscToHexFun &rArr; AscTOHex
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscTOHex
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>CS_Delay_10_uS</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, basicfunc.o(i.CS_Delay_10_uS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CS_Delay_10_uS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_2us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
</UL>

<P><STRONG><a name="[181]"></a>CheckNode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lowprcisiontime.o(i.CheckNode))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>

<P><STRONG><a name="[fa]"></a>Check_Run_User_Program_Falg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iap_updata.o(i.Check_Run_User_Program_Falg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Run_User_Program_Falg &rArr; API_KillTimer &rArr; DelTimer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KillTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Check_Run_User_Program_Falg
</UL>

<P><STRONG><a name="[12d]"></a>ChkPostDataSum</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, postproda.o(i.ChkPostDataSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChkPostDataSum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwocharToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>

<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; DMA_UART_Receive &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; DMA_UART_Receive &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; DMA_UART_Receive &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Channel3_IRQHandler &rArr; DMA_UART_Receive &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>DMA_UART_Receive</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, usart.o(i.DMA_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_UART_Receive &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>DMA_UART_Receive_Process</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, usart.o(i.DMA_UART_Receive_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DMA_UART_Receive_Process &rArr; DMA_USART_Timeout &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol_DMA_ReceiveAnalysis
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.Uart_Init)
</UL>
<P><STRONG><a name="[135]"></a>DMA_USART_Timeout</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usart.o(i.DMA_USART_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_USART_Timeout &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usart_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
</UL>

<P><STRONG><a name="[139]"></a>DMA_UsartConfiguration</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usart.o(i.DMA_UsartConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_UsartConfiguration &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
</UL>

<P><STRONG><a name="[13d]"></a>DMA_Usart_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usart.o(i.DMA_Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_Usart_Init &rArr; DMA_UsartConfiguration &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartStructBaseFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Protocol_Debug
</UL>

<P><STRONG><a name="[141]"></a>DealPostPro</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, postproda.o(i.DealPostPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DealPostPro &rArr; Uploading_Pro &rArr; PostSendDefault &rArr; PostSendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>

<P><STRONG><a name="[143]"></a>DealPostProtocol</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, postproda.o(i.DealPostProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DealPostProtocol &rArr; DealPostPro &rArr; Uploading_Pro &rArr; PostSendDefault &rArr; PostSendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoascii2byte
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_chksum
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHexFun
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostPro
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPostDataSum
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePro_Debug_Dispose
</UL>

<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>DelTimer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lowprcisiontime.o(i.DelTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelTimer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KillTimer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimer
</UL>

<P><STRONG><a name="[12c]"></a>Delay_2us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basicfunc.o(i.Delay_2us))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Delay_10_uS
</UL>

<P><STRONG><a name="[148]"></a>Delay_MS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, basicfunc.o(i.Delay_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_MS &rArr; API_WatchDog_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Delay_10_uS
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupComDir
</UL>

<P><STRONG><a name="[14c]"></a>DoProtocolReceiveAnalysis</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, protocol.o(i.DoProtocolReceiveAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DoProtocolReceiveAnalysis &rArr; CheckProtocolType
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPINFO
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProtocolType
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetDeal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Receive
</UL>

<P><STRONG><a name="[136]"></a>DoProtocol_DMA_ReceiveAnalysis</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, protocol.o(i.DoProtocol_DMA_ReceiveAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DoProtocol_DMA_ReceiveAnalysis &rArr; CheckProtocolType
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPINFO
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProtocolType
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
</UL>

<P><STRONG><a name="[fc]"></a>DoProtocols</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocol.o(i.DoProtocols))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoProtocols
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoProtocols
</UL>

<P><STRONG><a name="[14f]"></a>DoTimer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lowprcisiontime.o(i.DoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DoTimer &rArr; API_tcp_1ms_pro &rArr; tcp_1ms_pro &rArr; W5100_pro &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_tcp_1ms_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>DownLoad_DealPro</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, download.o(i.DownLoad_DealPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DownLoad_DealPro &rArr; DownLoad_Pro &rArr; Program_Updata &rArr; API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealProtocol
</UL>

<P><STRONG><a name="[152]"></a>DownLoad_DealProtocol</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, download.o(i.DownLoad_DealProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DownLoad_DealProtocol &rArr; DownLoad_DealPro &rArr; DownLoad_Pro &rArr; Program_Updata &rArr; API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_LcdMode_chksum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealPro
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceivePro_Debug_Dispose
</UL>

<P><STRONG><a name="[151]"></a>DownLoad_Pro</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, download_pro.o(i.DownLoad_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DownLoad_Pro &rArr; Program_Updata &rArr; API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendTail
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendHead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendChksum
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealPro
</UL>

<P><STRONG><a name="[158]"></a>DownLoad_SendByte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, download.o(i.DownLoad_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DownLoad_SendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddProtocolBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendTail
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendHead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendChksum
</UL>

<P><STRONG><a name="[156]"></a>DownLoad_SendChksum</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, download.o(i.DownLoad_SendChksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DownLoad_SendChksum &rArr; DownLoad_SendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetProtocolBufferOrLen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_Pro
</UL>

<P><STRONG><a name="[155]"></a>DownLoad_SendHead</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, download.o(i.DownLoad_SendHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DownLoad_SendHead &rArr; DownLoad_SendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_Pro
</UL>

<P><STRONG><a name="[157]"></a>DownLoad_SendTail</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, download.o(i.DownLoad_SendTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DownLoad_SendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_StartSendBuffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_Pro
</UL>

<P><STRONG><a name="[159]"></a>EnableCom</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.EnableCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EnableCom &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Send
</UL>

<P><STRONG><a name="[160]"></a>FLASH_PagesMask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iap_updata.o(i.FLASH_PagesMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PagesMask
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
</UL>

<P><STRONG><a name="[11f]"></a>FeedWatchDog</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.FeedWatchDog))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
</UL>

<P><STRONG><a name="[fe]"></a>GetProtocolBufferOrLen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, protocol.o(i.GetProtocolBufferOrLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetProtocolBufferOrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetProtocolBufferOrLen
</UL>

<P><STRONG><a name="[15c]"></a>GetProtocolResource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, protocol.o(i.GetProtocolResource))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>

<P><STRONG><a name="[13e]"></a>GetUartStructBaseFunction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.GetUartStructBaseFunction))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartParameter
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Protocol_Debug
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
</UL>

<P><STRONG><a name="[130]"></a>GetUtProtocolResource</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.GetUtProtocolResource))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolResource
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Timeout
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Timeout
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Timeout
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Timeout
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Timeout
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UsartConfiguration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive_Process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_Receive
</UL>

<P><STRONG><a name="[100]"></a>Get_Iap_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iap.o(i.Get_Iap_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Iap_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Get_Iap_Config
</UL>

<P><STRONG><a name="[138]"></a>Get_Usart_Function</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.Get_Usart_Function))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_Timeout
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IAP_ReStart</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, iap_updata.o(i.IAP_ReStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IAP_ReStart &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_copyflash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_updata.o(i.IAP_Update_End)
</UL>
<P><STRONG><a name="[102]"></a>IAP_Update_End</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, iap_updata.o(i.IAP_Update_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IAP_Update_End &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_End
</UL>

<P><STRONG><a name="[104]"></a>IAP_Update_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, iap_updata.o(i.IAP_Update_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IAP_Update_Start &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_Start
</UL>

<P><STRONG><a name="[106]"></a>IAP_Update_Write</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, iap_updata.o(i.IAP_Update_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IAP_Update_Write &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Page_Clear
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_Write
</UL>

<P><STRONG><a name="[108]"></a>IAP_copyflash</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, iap_updata.o(i.IAP_copyflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IAP_copyflash &rArr; IAP_ReStart &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReStart
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PagesMask
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_copyflash
</UL>

<P><STRONG><a name="[161]"></a>InitChip</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.InitChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitChip &rArr; SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardWare
</UL>

<P><STRONG><a name="[164]"></a>InitHardWare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.InitHardWare))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitHardWare &rArr; API_eth_init &rArr; eth_init &rArr; W5100_Initialization &rArr; Set_network &rArr; sysinit &rArr; IINCHIP_WRITE &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_eth_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Timers_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Protocols_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChip
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>InitSoftSystem</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.InitSoftSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitSoftSystem &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_StartRunTimer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>Init_Protocol_Debug</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, protocol_debug.o(i.Init_Protocol_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_Protocol_Debug &rArr; DMA_Usart_Init &rArr; DMA_UsartConfiguration &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterProtocolFun
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartStructBaseFunction
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Usart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocols_Init
</UL>

<P><STRONG><a name="[177]"></a>InvertedOrder</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, basicfunc.o(i.InvertedOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InvertedOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Updata
</UL>

<P><STRONG><a name="[10a]"></a>Jump_To_UserProgram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iap_updata.o(i.Jump_To_UserProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Jump_To_UserProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Jump_To_UserProgram
</UL>

<P><STRONG><a name="[9f]"></a>KickDog</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.KickDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KickDog &rArr; API_WatchDog_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_net
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pra
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_data_from_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_info_data_to_flash
</UL>

<P><STRONG><a name="[11d]"></a>LowPrcisionTime_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lowprcisiontime.o(i.LowPrcisionTime_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LowPrcisionTime_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Timers_Init
</UL>

<P><STRONG><a name="[119]"></a>LowPrcisionTime_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lowprcisiontime.o(i.LowPrcisionTime_Start))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_StartRunTimer
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>NetDeal</STRONG> (Thumb, 122 bytes, Stack size 2528 bytes, protocol.o(i.NetDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712<LI>Call Chain = NetDeal &rArr; API_read_eth_net &rArr; read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_read_eth_net
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocolReceiveAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_NetDeal
</UL>

<P><STRONG><a name="[4b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.OTG_FS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>PostSendByte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, postproda.o(i.PostSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PostSendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddProtocolBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendTail
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendHead
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>

<P><STRONG><a name="[16e]"></a>PostSendByteASC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, postproda.o(i.PostSendByteASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PostSendByteASC &rArr; PostSendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_hex2asc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_hex2asc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSend_Word
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendPostChksum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendHead
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
</UL>

<P><STRONG><a name="[171]"></a>PostSendDataLen</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, postproda.o(i.PostSendDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PostSendDataLen &rArr; PostSendFixupByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetProtocolBufferOrLen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendFixupByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
</UL>

<P><STRONG><a name="[145]"></a>PostSendDefault</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, postproda.o(i.PostSendDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PostSendDefault &rArr; PostSendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendTail
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendPostChksum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendHead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDataLen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>

<P><STRONG><a name="[172]"></a>PostSendFixupByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, postproda.o(i.PostSendFixupByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PostSendFixupByte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_hex2asc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_hex2asc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDataLen
</UL>

<P><STRONG><a name="[173]"></a>PostSendHead</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, postproda.o(i.PostSendHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PostSendHead &rArr; PostSendByteASC &rArr; PostSendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
</UL>

<P><STRONG><a name="[174]"></a>PostSendPostChksum</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, postproda.o(i.PostSendPostChksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PostSendPostChksum &rArr; PostSendByteASC &rArr; PostSendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetProtocolBufferOrLen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
</UL>

<P><STRONG><a name="[175]"></a>PostSendTail</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, postproda.o(i.PostSendTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PostSendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_StartSendBuffer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
</UL>

<P><STRONG><a name="[176]"></a>PostSend_Word</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, postproda.o(i.PostSend_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PostSend_Word &rArr; PostSendByteASC &rArr; PostSendByte &rArr; API_AddProtocolBuffer &rArr; AddProtocolBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uploading_Pro
</UL>

<P><STRONG><a name="[5a]"></a>Program_Updata_timeout</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, download_pro.o(i.Program_Updata_timeout))
<BR>[Address Reference Count : 1]<UL><LI> download_pro.o(i.Program_Updata)
</UL>
<P><STRONG><a name="[14b]"></a>ProtocolReceiveByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, protocol.o(i.ProtocolReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol
</UL>

<P><STRONG><a name="[14a]"></a>ProtocolSendByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protocol.o(i.ProtocolSendByte))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBuffer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol
</UL>

<P><STRONG><a name="[110]"></a>Protocols_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(i.Protocols_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Protocols_Init &rArr; Uart_Init &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocolReceiveCallBack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Protocol_Debug
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Protocols_Init
</UL>

<P><STRONG><a name="[178]"></a>ReceiveCallBack</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, protocol.o(i.ReceiveCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReceiveCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_DoProtocol
</UL>

<P><STRONG><a name="[179]"></a>ReceiveDataFromUartStruct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.ReceiveDataFromUartStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReceiveDataFromUartStruct
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Receive
</UL>

<P><STRONG><a name="[5c]"></a>ReceivePro_Debug_Dispose</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, protocolreccallback.o(i.ReceivePro_Debug_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ReceivePro_Debug_Dispose &rArr; DownLoad_DealProtocol &rArr; DownLoad_DealPro &rArr; DownLoad_Pro &rArr; Program_Updata &rArr; API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealProtocol
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.Protocols_Init)
</UL>
<P><STRONG><a name="[167]"></a>RegisterProtocolFun</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, protocol.o(i.RegisterProtocolFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegisterProtocolFun
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Protocol_Debug
</UL>

<P><STRONG><a name="[112]"></a>ResetProtocolBuffer</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, protocol.o(i.ResetProtocolBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ResetProtocolBuffer
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>Save_Iap_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iap.o(i.Save_Iap_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_iap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReStart
</UL>

<P><STRONG><a name="[113]"></a>Select_Program_run</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, iap_updata.o(i.Select_Program_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Select_Program_run &rArr; API_IAP_copyflash &rArr; IAP_copyflash &rArr; IAP_ReStart &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Jump_To_UserProgram
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_copyflash
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Get_Iap_Config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Select_Program_run
</UL>

<P><STRONG><a name="[17b]"></a>SendDataFromUartStruct</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.SendDataFromUartStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendDataFromUartStruct
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Send
</UL>

<P><STRONG><a name="[5e]"></a>Send_Net_Data</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, protocol.o(i.Send_Net_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Send_Net_Data &rArr; API_write_eth_net &rArr; write_eth_net &rArr; send &rArr; send_data_processing &rArr; write_data &rArr; wiz_write_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_write_eth_net
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_check_sendable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KillTimer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> protocol.o(i.Send_Net_Data)
<LI> protocol.o(i.StartSendBuffer)
</UL>
<P><STRONG><a name="[17d]"></a>SetProtocolReceiveCallBack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protocol.o(i.SetProtocolReceiveCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocols_Init
</UL>

<P><STRONG><a name="[117]"></a>SetTimer</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lowprcisiontime.o(i.SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
</UL>

<P><STRONG><a name="[115]"></a>SetUartParameter</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, protocol.o(i.SetUartParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartStructBaseFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetComParameter
</UL>

<P><STRONG><a name="[5d]"></a>SettingCommBps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, protocol.o(i.SettingCommBps))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SettingCommBps &rArr; SettingSaveByUSART_FUNCTION &rArr; SettingSaveByUartStruct &rArr; SettingSave &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSaveByUSART_FUNCTION
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.SetUartParameter)
</UL>
<P><STRONG><a name="[183]"></a>SettingSaveByUSART_FUNCTION</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i.SettingSaveByUSART_FUNCTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SettingSaveByUSART_FUNCTION &rArr; SettingSaveByUartStruct &rArr; SettingSave &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSaveByUartStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingCommBps
</UL>

<P><STRONG><a name="[17a]"></a>SetupComDir</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usart.o(i.SetupComDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetupComDir &rArr; Delay_MS &rArr; API_WatchDog_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendBuffer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Send
</UL>

<P><STRONG><a name="[11b]"></a>StartSendBuffer</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, protocol.o(i.StartSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupComDir
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartStructBaseFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_StartSendBuffer
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lowprcisiontime.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12e]"></a>TwocharToInt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basicfunc.o(i.TwocharToInt))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkPostDataSum
</UL>

<P><STRONG><a name="[7]"></a>UART4_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usart.o(.data)
<LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 2]<UL><LI> usart.o(.data)
<LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 2]<UL><LI> usart.o(.data)
<LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART1_Timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART1_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.DMA_USART_Timeout)
</UL>
<P><STRONG><a name="[3]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 2]<UL><LI> usart.o(.data)
<LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART2_Timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART2_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.DMA_USART_Timeout)
</UL>
<P><STRONG><a name="[5]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 2]<UL><LI> usart.o(.data)
<LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART3_Timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART3_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.DMA_USART_Timeout)
</UL>
<P><STRONG><a name="[52]"></a>USART4_Timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART4_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART4_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.DMA_USART_Timeout)
</UL>
<P><STRONG><a name="[53]"></a>USART5_Timeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart.o(i.USART5_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUtProtocolResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.DMA_USART_Timeout)
</UL>
<P><STRONG><a name="[17c]"></a>Uart_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Uart_Init &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStruct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocols_Init
</UL>

<P><STRONG><a name="[142]"></a>Uploading_Pro</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uploading_pro.o(i.Uploading_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Uploading_Pro &rArr; PostSendDefault &rArr; PostSendTail &rArr; API_StartSendBuffer &rArr; StartSendBuffer &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSend_Word
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendTail
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendPostChksum
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendHead
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDefault
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendDataLen
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostPro
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_power_cl.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>WD_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, watchdog.o(i.WD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Init
</UL>

<P><STRONG><a name="[bc]"></a>Write_ComConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net.o(i.Write_ComConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[253]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[254]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[255]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[129]"></a>asc2hex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, basicfunc.o(i.asc2hex))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoascii2byte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscTOHex
</UL>

<P><STRONG><a name="[153]"></a>chk_LcdMode_chksum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, basicfunc.o(i.chk_LcdMode_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chk_LcdMode_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_DealProtocol
</UL>

<P><STRONG><a name="[146]"></a>chk_post_chksum</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, basicfunc.o(i.chk_post_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_post_chksum &rArr; AscTOHex
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscTOHex
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>

<P><STRONG><a name="[147]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelTimer
</UL>

<P><STRONG><a name="[14e]"></a>getPINFO</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, protocol.o(i.getPINFO))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocolReceiveAnalysis
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol_DMA_ReceiveAnalysis
</UL>

<P><STRONG><a name="[bd]"></a>goto_iap</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, iap.o(i.goto_iap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = goto_iap &rArr; Save_Iap_Config &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Iap_Config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[16f]"></a>hi_hex2asc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, basicfunc.o(i.hi_hex2asc))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendFixupByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>

<P><STRONG><a name="[170]"></a>low_hex2asc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basicfunc.o(i.low_hex2asc))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendFixupByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSendByteASC
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720<LI>Call Chain = main &rArr; API_NetDeal &rArr; NetDeal &rArr; API_read_eth_net &rArr; read_eth_net &rArr; loopback_tcps &rArr; recv &rArr; recv_data_processing &rArr; read_data &rArr; wiz_read_buf &rArr; IINCHIP_SpiSendData &rArr; SPI1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoTimer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_NetDeal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoProtocols
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Check_Run_User_Program_Falg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftSystem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardWare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[182]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>

<P><STRONG><a name="[144]"></a>twoascii2byte</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, basicfunc.o(i.twoascii2byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = twoascii2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealPostProtocol
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[149]"></a>DoProtocol</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usart.o(i.DoProtocol))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendByte
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>SettingSave</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, usart.o(i.SettingSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SettingSave &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSaveByUartStruct
</UL>

<P><STRONG><a name="[187]"></a>SettingSaveByUartStruct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.SettingSaveByUartStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SettingSaveByUartStruct &rArr; SettingSave &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSave
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSaveByUSART_FUNCTION
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
</UL>

<P><STRONG><a name="[0]"></a>USART1_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART1_Init))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USART2_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART2_Init))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USART3_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART3_Init))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USART4_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usart.o(i.USART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USART4_Init &rArr; SettingSaveByUartStruct &rArr; SettingSave &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingSaveByUartStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USART5_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.USART5_Init))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[18e]"></a>UartStruct_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usart.o(i.UartStruct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartStruct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[15d]"></a>IAP_Page_Clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iap_updata.o(i.IAP_Page_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_Page_Clear &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_WatchDog_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Update_Start
</UL>

<P><STRONG><a name="[14d]"></a>CheckProtocolType</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, protocol.o(i.CheckProtocolType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckProtocolType
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocolReceiveAnalysis
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocol_DMA_ReceiveAnalysis
</UL>

<P><STRONG><a name="[57]"></a>Protocol_DoProtocol</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, protocol_debug.o(i.Protocol_DoProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protocol_DoProtocol &rArr; API_KillTimer &rArr; DelTimer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_KillTimer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_debug.o(i.Init_Protocol_Debug)
</UL>
<P><STRONG><a name="[58]"></a>Protocol_Receive</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, protocol_debug.o(i.Protocol_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Protocol_Receive &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProtocolReceiveAnalysis
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataFromUartStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_debug.o(i.Init_Protocol_Debug)
</UL>
<P><STRONG><a name="[59]"></a>Protocol_Send</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, protocol_debug.o(i.Protocol_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Protocol_Send &rArr; SetupComDir &rArr; Delay_MS &rArr; API_WatchDog_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupComDir
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataFromUartStruct
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_debug.o(i.Init_Protocol_Debug)
</UL>
<P><STRONG><a name="[5b]"></a>ReceiveTimerOut</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, protocol_debug.o(i.ReceiveTimerOut))
<BR>[Address Reference Count : 1]<UL><LI> protocol_debug.o(i.Protocol_Receive)
</UL>
<P><STRONG><a name="[154]"></a>Program_Updata</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, download_pro.o(i.Program_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Program_Updata &rArr; API_SetComParameter &rArr; SetUartParameter &rArr; API_SetTimer &rArr; SetTimer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetComParameter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IAP_Update_End
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertedOrder
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTimer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendTail
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendHead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendChksum
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad_Pro
</UL>

<P><STRONG><a name="[63]"></a>SetSysClockTo72</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[62]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[80]"></a>TI4_Config</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7e]"></a>TI3_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7c]"></a>TI2_Config</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7a]"></a>TI1_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
